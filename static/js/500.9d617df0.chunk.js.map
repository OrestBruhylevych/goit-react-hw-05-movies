{"version":3,"file":"static/js/500.9d617df0.chunk.js","mappings":"wMAEe,SAASA,EAAT,GAA2D,IAAD,IAAhCC,MAAAA,OAAgC,MAAxB,iBAAwB,EAANC,EAAM,EAANA,GAC3DC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIF,GAAIA,EAAR,UACE,SAAC,KAAD,CAASG,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMJ,GAA7C,SACGF,MCLM,SAASO,EAAT,GAAiC,IACxCC,EADuC,EAAVC,OACTC,KAAI,SAAAC,GAC5B,IAAQV,EAAcU,EAAdV,GAAID,EAAUW,EAAVX,MAEZ,OAAO,SAACD,EAAD,CAAyBE,GAAIA,EAAID,MAAOA,GAAnBC,MAG9B,OAAO,wBAAKO,M,iLCNC,SAASI,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,gBAC5BC,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KAAaE,SAAS,sBAG/B,OACE,SAAC,KAAD,CACEC,cAAe,CAAEF,MAAO,IACxBF,iBAAkBA,EAClBK,SAAU,SAACC,EAAQC,GACjBR,EAAiC,KAAjBO,EAAOJ,MAAe,CAAEA,MAAOI,EAAOJ,OAAU,KAJpE,UAQE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOM,KAAK,OAAOC,KAAK,WACxB,SAAC,KAAD,CAAcA,KAAK,QAAQC,UAAU,SACrC,mBAAQF,KAAK,SAAb,yBCZO,SAASG,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBd,EAArB,KACA,GAA4Be,EAAAA,EAAAA,UAAS,IAArC,eAAOnB,EAAP,KAAeoB,EAAf,KAEMb,EAAQW,EAAaG,IAAI,SAc/B,OAZAC,EAAAA,EAAAA,YAAU,WACJf,IACFgB,EAAAA,EAAAA,IAAoBhB,GAAOiB,MAAK,SAAAC,GACX,IAAfA,EAAIC,QAAgBnB,IACtBH,EAAgB,IAChBuB,IAAAA,OAAAA,QAAwB,iCAE1BP,EAAUK,QAGb,CAAClB,EAAOH,KAGT,UAAC,IAAD,YACE,SAACD,EAAD,CAAWC,gBAAiBA,IAC3BG,IAAS,SAACT,EAAA,EAAD,CAAYE,OAAQA","sources":["components/MoviesList/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n\nexport default function MoviesListItem({ title = 'No movie title', id }) {\n  const location = useLocation();\n\n  return (\n    <li id={id}>\n      <NavLink to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </NavLink>\n    </li>\n  );\n}\n","import MoviesListItem from './MoviesListItem';\nimport PropTypes from 'prop-types';\n\nexport default function MoviesList({ movies }) {\n  const moviesItem = movies.map(movie => {\n    const { id, title } = movie;\n\n    return <MoviesListItem key={id} id={id} title={title} />;\n  });\n\n  return <ol>{moviesItem}</ol>;\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};\n","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nexport default function SearchBar({ setSearchParams }) {\n  const validationSchema = Yup.object({\n    query: Yup.string().required('Name is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{ query: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        setSearchParams(values.query !== '' ? { query: values.query } : {});\n        //  actions.resetForm();\n      }}\n    >\n      <Form>\n        <Field type=\"text\" name=\"query\" />\n        <ErrorMessage name=\"query\" component=\"div\" />\n        <button type=\"submit\">Search</button>\n      </Form>\n    </Formik>\n  );\n}\n\nSearchBar.propTypes = { setSearchParams: PropTypes.func.isRequired };\n","import MoviesList from 'components/MoviesList/MoviesList';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getMoviesSearhQuery } from '../services/api';\nimport { Conteiner } from 'components/GlobalStyle';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      getMoviesSearhQuery(query).then(res => {\n        if (res.length === 0 && query) {\n          setSearchParams({});\n          Notiflix.Notify.failure('Not found movie this name!!!');\n        }\n        setMovies(res);\n      });\n    }\n  }, [query, setSearchParams]);\n\n  return (\n    <Conteiner>\n      <SearchBar setSearchParams={setSearchParams} />\n      {query && <MoviesList movies={movies} />}\n    </Conteiner>\n  );\n}\n"],"names":["MoviesListItem","title","id","location","useLocation","to","state","from","MoviesList","moviesItem","movies","map","movie","SearchBar","setSearchParams","validationSchema","Yup","query","required","initialValues","onSubmit","values","actions","type","name","component","Movies","useSearchParams","searchParams","useState","setMovies","get","useEffect","getMoviesSearhQuery","then","res","length","Notiflix"],"sourceRoot":""}